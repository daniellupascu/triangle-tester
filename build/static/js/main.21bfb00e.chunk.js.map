{"version":3,"sources":["Navigation/Navigation.js","Result/Result.js","Tester/Tester.js","App.js","serviceWorker.js","index.js"],"names":["navigation","react_default","a","createElement","AppBar_default","color","position","Toolbar_default","Typography_default","variant","Result","checkValidityOfValues","sides","valuesAreValid","side","isNaN","trim","this","props","side1","side2","side3","triangleType","side1Style","side2Style","side3Style","id","style","width","height","borderLeft","borderRight","borderBottom","Component","Tester","state","valueChanged","event","Object","objectSpread","_this","target","value","setState","_this2","inputs","className","keys","map","Input_default","key","type","placeholder","onChange","src_Result_Result","App","Navigation","src_Tester_Tester","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"uQAiBeA,EAVI,kBACfC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAQG,MAAM,UAAUC,SAAS,UAC7BL,EAAAC,EAAAC,cAACI,EAAAL,EAAD,KACED,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAYO,QAAQ,KAAKJ,MAAM,WAA/B,+CC4EKK,6MA/EXC,sBAAwB,SAACC,GAGrB,IAAIC,GAAiB,EAGrB,IAAI,IAAIC,KAAQF,EAAO,CACnB,GAAKG,MAAMH,EAAME,KAAiC,KAAvBF,EAAME,GAAME,OAIlC,CACDH,GAAiB,EACjB,MALAA,GAAiB,EASzB,OAAOA,2EAMP,GAAGI,KAAKN,sBAAsBM,KAAKC,MAAMN,OAAO,CAG5C,IAAMO,EAAQF,KAAKC,MAAMN,MAAMO,MACzBC,EAAQH,KAAKC,MAAMN,MAAMQ,MACzBC,EAAQJ,KAAKC,MAAMN,MAAMS,MAI3BC,EAAe,KAGfA,EADDH,IAAUC,GAASD,IAAUE,EACb,cAGVF,IAAUC,GAASD,IAAUE,GAASD,IAAUC,EACtC,YAIA,UAKnB,IAAME,EAAaN,KAAKC,MAAMN,MAAMO,MAAQ,uBACtCK,EAAaP,KAAKC,MAAMN,MAAMQ,MAAQ,uBACtCK,EAAaR,KAAKC,MAAMN,MAAMS,MAAQ,iBAE5C,OACIpB,EAAAC,EAAAC,cAAA,WAEIF,EAAAC,EAAAC,cAAA,uBAAemB,EAAf,aAEArB,EAAAC,EAAAC,cAAA,OAAKuB,GAAG,WAAWC,MAAO,CACtBC,MAAO,EACPC,OAAQ,EACRC,WAAYP,EACZQ,YAAaP,EACbQ,aAAcP,MAQ1B,OACIxB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,qFA3EC8B,aCsDNC,qNAhDXC,MAAQ,CACJvB,MAAO,CACHO,MAAO,GACPC,MAAO,GACPC,MAAO,OAKfe,aAAe,SAACC,EAAOvB,GACnB,IAAIF,EAAK0B,OAAAC,EAAA,EAAAD,CAAA,GAAOE,EAAKL,MAAMvB,OAC3BA,EAAME,GAAQuB,EAAMI,OAAOC,MAC3BF,EAAKG,SAAS,CACV/B,MAAOA,6EAIP,IAAAgC,EAAA3B,KAEA4B,EAAS,KAmBb,OAjBG5B,KAAKkB,MAAMvB,QACViC,EACI5C,EAAAC,EAAAC,cAAA,OAAK2C,UAAU,kBACVR,OAAOS,KAAK9B,KAAKkB,MAAMvB,OAAOoC,IAAI,SAAClC,GAChC,OAAOb,EAAAC,EAAAC,cAAC8C,EAAA/C,EAAD,CACCgD,IAAKpC,EACLqC,KAAK,SACLC,YAAatC,EAEbuC,SAAU,SAAChB,GAAD,OAAWO,EAAKR,aAAaC,EAAOvB,UASlEb,EAAAC,EAAAC,cAAA,OAAK2C,UAAU,oBACVD,EACD5C,EAAAC,EAAAC,cAACmD,EAAD,CAAQ1C,MAAOK,KAAKkB,MAAMvB,gBA5CrBqB,cCWNsB,mLATX,OACEtD,EAAAC,EAAAC,cAAA,OAAK2C,UAAU,OACb7C,EAAAC,EAAAC,cAACqD,EAAD,MACAvD,EAAAC,EAAAC,cAACsD,EAAD,cALUxB,aCGZyB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBtC,QACfgC,UAAUC,cAAcQ,YAK1BC,QAAQC,IAAI,6CAGRZ,EAAOa,UACTb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,EAAOc,WACTd,EAAOc,UAAUT,SAO5BU,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,KCnFjEC,IAASC,OAAOnF,EAAAC,EAAAC,cAACkF,EAAD,MAASC,SAASC,eAAe,SDc1C,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,GAAwB7B,OAAOC,UAC3C6B,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,OAAQ,WAC9B,IAAM1B,EAAK,GAAA2B,OAAMH,GAAN,sBAEP/B,GA2DV,SAAiCO,EAAOC,GAEtC2B,MAAM5B,GACHK,KAAK,SAAAwB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C/B,UAAUC,cAAc+B,MAAM7B,KAAK,SAAAC,GACjCA,EAAa6B,aAAa9B,KAAK,WAC7BV,OAAOC,SAASwC,aAKpBrC,EAAgBC,EAAOC,KAG1Be,MAAM,WACLJ,QAAQC,IACN,mEA/EAwB,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,KAAK,WACjCO,QAAQC,IACN,+GAMJd,EAAgBC,EAAOC,MCrC/BE","file":"static/js/main.21bfb00e.chunk.js","sourcesContent":["import React from 'react';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\n// functional component navigation, which returns the navigation bar at the top of the page\nconst navigation = () => (\n    <AppBar color='primary' position='sticky'>\n        <Toolbar>\n          <Typography variant=\"h6\" color=\"inherit\">\n            Triangle tester\n          </Typography>\n        </Toolbar>\n    </AppBar>\n);\n\nexport default navigation;","import React, { Component } from 'react';\n\n// Result class component which determines the type of triangle and draws \n// it on the page using the props it recieves from the parent component\nclass Result extends Component {\n\n    // function that checks the validity of the provided lengths of the sides\n    checkValidityOfValues = (sides) => {\n\n        // by default, the values are not valid\n        let valuesAreValid = false;\n\n        // check if each value is a number and it's not an empty string when trimmed\n        for(let side in sides) {\n            if (!isNaN(sides[side]) && sides[side].trim() !== ''){\n                valuesAreValid = true;\n            }\n            // if the conditions are not met, values are not valid and stop the for loop\n            else {\n                valuesAreValid = false;\n                break;\n            } \n        }\n\n        return valuesAreValid;\n    }\n    \n    render() {\n\n        // check if the values enetered by the user are numeric and not empty \n        if(this.checkValidityOfValues(this.props.sides)){\n\n            // save the side lengths in constants\n            const side1 = this.props.sides.side1;\n            const side2 = this.props.sides.side2;\n            const side3 = this.props.sides.side3;\n\n            // determine the type of triangle by comparing the sides length\n            // by default, the triangle does not have a type\n            let triangleType = null;\n            // if all sides ar equal, the triangle is equilateral\n            if(side1 === side2 && side1 === side3){\n                triangleType = 'equilateral';\n            }\n            // else if 2 sides are equal then it is isosceles\n            else if (side1 === side2 || side1 === side3 || side2 === side3) {\n                triangleType = 'isosceles';\n            } \n            // in case there is not a pair of equal sides, then the triangle is scalene\n            else {\n                triangleType = 'scalene';\n            }\n\n            // based on the length of the sides, create custom css style properties\n            // so that the triangle that is displayed reflets the values entered in the fields\n            const side1Style = this.props.sides.side1 + 'px solid transparent';\n            const side2Style = this.props.sides.side2 + 'px solid transparent';\n            const side3Style = this.props.sides.side3 + 'px solid green';\n\n            return(\n                <div>\n                    {/* text that displays the type of triangle */}\n                    <p>you made a {triangleType} triangle</p> \n                    {/* graphic representation of the triangle using the custom css rules */}\n                    <div id='triangle' style={{\n                        width: 0,\n                        height: 0,\n                        borderLeft: side1Style,\n                        borderRight: side2Style,\n                        borderBottom: side3Style,\n                        }}>\n                    </div>\n                </div>\n            )      \n        }\n        // in case not all the values are inserted display the text below \n        else {\n            return(\n                <div>\n                    <p>Please enter numeric values in all the inputs to form a triangle</p> \n                </div>\n            )      \n        }\n    }\n}\n\nexport default Result;","import React, { Component } from 'react';\nimport Input from '@material-ui/core/Input';\n\nimport Result from '../Result/Result';\nimport './Tester.css';\n\n// Tester component, which contains the form and the result\nclass Tester extends Component {\n\n    // the state, which stores the values entered in the inputs\n    state = {\n        sides: {\n            side1: '',\n            side2: '',\n            side3: ''\n        },\n    }\n\n    // function that updates the state with the new values from the input\n    valueChanged = (event, side) => {\n        let sides = {...this.state.sides}\n        sides[side] = event.target.value;\n        this.setState({\n            sides: sides\n        });\n    };\n\n    render(){\n\n        let inputs = null;\n        // for each side in the this.state, an input component will be displayed. All the inputs are store in a variable\n        if(this.state.sides) {\n            inputs = (\n                <div className='Form-container'>\n                    {Object.keys(this.state.sides).map((side) => {\n                        return <Input \n                                key={side}\n                                type='number'\n                                placeholder={side}\n                                // on every change of the input, the value is saved in the state\n                                onChange={(event) => this.valueChanged(event, side)}\n                            />\n                    })}\n                </div>\n            )\n        }\n\n        // return the inputs and the result component\n        return(\n            <div className='Tester-container'>\n                {inputs}\n                <Result sides={this.state.sides} />\n            </div>\n        );\n    }\n\n}\n\nexport default Tester;","import React, { Component } from 'react';\nimport './App.css';\n\nimport Navigation from './Navigation/Navigation';\nimport Tester from './Tester/Tester';\n\n// Class Component App, which is the component at the tip of the pyramid in our project\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Navigation />\n        <Tester />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}